# =============================================================================
# NestJS 项目环境配置文件模板
# =============================================================================
# 此文件作为环境配置的模板，包含所有必需的环境变量
# 使用方法：复制此文件为 .env 并根据实际环境修改配置值
# 注意：此文件不应包含真实的敏感信息，仅作为配置参考
# =============================================================================

# -----------------------------------------------------------------------------
# 数据库配置 (PostgreSQL)
# -----------------------------------------------------------------------------
# 数据库服务器地址 (开发环境示例: localhost | 生产环境示例: 192.168.1.100)
DATABASE_HOST=localhost

# 数据库服务器端口 (PostgreSQL 默认端口: 5432)
DATABASE_PORT=5432

# 数据库连接用户名 (需要有创建表和读写权限)
# 生产环境建议使用专用的应用数据库用户，而非 postgres 超级用户
DATABASE_USER=postgres

# 数据库连接密码 (生产环境请使用强密码，至少12位包含大小写字母、数字和特殊字符)
# 示例强密码格式: YourApp_P@ssw0rd_2024
DATABASE_PASSWORD=your_secure_password_here

# 应用使用的数据库名称 (应用启动前需要手动创建该数据库)
# 建议使用项目名称 + 环境标识，如: nest_eidos_dev, nest_eidos_prod
DATABASE_NAME=nest_eidos

# -----------------------------------------------------------------------------
# Redis 缓存配置
# -----------------------------------------------------------------------------
# Redis 服务器地址 (用于存储认证 token 和缓存数据)
# 开发环境: localhost，生产环境: 专用 Redis 服务器地址
REDIS_HOST=localhost

# Redis 服务器端口 (Redis 默认端口: 6379)
# 如果使用自定义 Redis 端口，请修改此处
REDIS_PORT=6379

# Redis 连接密码 (生产环境强烈建议设置密码)
# 如 Redis 没有设置密码可以删除此行或留空
REDIS_PASSWORD=your_redis_password_here

# Redis 数据库编号 (0-15，默认使用 0)
# 建议不同环境使用不同的数据库编号：
# 开发环境: 0, 测试环境: 1, 生产环境: 2
REDIS_DB=0

# Redis 键名前缀 (用于区分不同应用的数据)
# 建议使用应用名称或项目缩写，如: nest_eidos:
REDIS_KEY_PREFIX=nest_eidos:

# -----------------------------------------------------------------------------
# 认证系统配置
# -----------------------------------------------------------------------------
# Token 过期时间 (秒)
# 建议值：
# - 开发环境: 3600 (1小时)
# - 生产环境: 1800 (30分钟) 或更短
# - 移动端应用: 86400 (24小时)
AUTH_TOKEN_EXPIRES_IN=3600

# Token 生成字节数 (生成的 token 将是 bytesLength * 2 个十六进制字符)
# 安全建议：
# - 最小值: 16 字节 (32个十六进制字符)
# - 推荐值: 32 字节 (64个十六进制字符)
# - 高安全要求: 64 字节 (128个十六进制字符)
AUTH_TOKEN_BYTES_LENGTH=32

# Redis 中存储 token 的键名前缀
# 用于在 Redis 中区分认证 token 和其他数据
# 建议格式: auth:token: 或 yourapp:auth:
AUTH_REDIS_KEY_PREFIX=auth:token:

# bcrypt 密码加密轮数
# 性能和安全平衡建议：
# - 开发环境: 10-12 (快速验证)
# - 生产环境: 12-14 (较高安全性)
# - 高安全要求: 14-16 (最高安全性，但验证较慢)
AUTH_BCRYPT_ROUNDS=10

# 最大登录失败尝试次数 (防止暴力破解攻击)
# 建议值：3-10 次，数值越小安全性越高
AUTH_MAX_LOGIN_ATTEMPTS=5

# 账户锁定时间 (秒)
# 建议根据业务场景设置：
# - 一般应用: 900 (15分钟)
# - 高安全应用: 3600 (1小时) 或更长
# - 用户体验优先: 300 (5分钟)
AUTH_LOCKOUT_TIME=900

# -----------------------------------------------------------------------------
# 应用基础配置
# -----------------------------------------------------------------------------
# 应用服务监听端口 (HTTP 服务端口)
# 开发环境常用端口：
# - NestJS 默认: 3000
# - 避免冲突端口: 3001, 8000, 8080
PORT=3000

# 运行环境 (development | production | test)
# 各环境说明：
# development: 开发模式，详细日志，热重载，调试信息
# production: 生产模式，性能优化，精简日志，错误处理
# test: 测试模式，内存数据库，模拟数据，测试覆盖率
NODE_ENV=development

# -----------------------------------------------------------------------------
# 配置说明和最佳实践
# -----------------------------------------------------------------------------
# 1. 安全性：
#    - 生产环境中所有密码都必须使用强密码
#    - 数据库和 Redis 建议使用专用用户，避免使用超级用户
#    - 定期轮换数据库密码和 Redis 密码
#
# 2. 环境分离：
#    - 不同环境使用不同的数据库和 Redis 实例
#    - 使用不同的键前缀避免数据冲突
#    - 生产环境的 token 过期时间应短于开发环境
#
# 3. 监控和维护：
#    - 定期清理过期的 token 和缓存数据
#    - 监控登录失败次数，异常情况及时处理
#    - 定期备份数据库数据
#
# 4. 部署注意事项：
#    - .env 文件不应提交到版本控制系统
#    - 生产环境使用环境变量或配置管理工具
#    - Docker 部署时使用 secrets 或环境变量注入
# =============================================================================